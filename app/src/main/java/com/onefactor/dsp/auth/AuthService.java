/* * ShiroService * Copyright (c) 2012 Cybervision. All rights reserved. */package com.onefactor.dsp.auth;import com.google.common.eventbus.EventBus;import com.onefactor.dsp.user.UserService;import com.onefactor.dsp.utils.ValidationService;import io.belov.soyuz.utils.func;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AnonymousAuthenticationToken;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;import javax.annotation.Nullable;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.security.Principal;@Servicepublic class AuthService {    private static final Logger log = LoggerFactory.getLogger(AuthService.class);    @Autowired    private UserService userService;    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private ValidationService validate;    @Autowired    private EventBus bus;    public boolean validatePassword(String password) {        return validate.password(password);    }    public boolean authenticate(String mail, String password, HttpServletRequest request, HttpServletResponse response) {        boolean authenticated = func.call(() -> {            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(mail, password);            try {                Authentication auth = authenticationManager.authenticate(token);                SecurityContextHolder.getContext().setAuthentication(auth);//            rememberMeServices.loginSuccess(request, response, auth);                return auth.isAuthenticated();            } catch (BadCredentialsException e) {                return false;            } catch (Exception e) {                log.error("Exception on user " + mail + " authentication", e);                return false;            }        });        if (authenticated) {            bus.post(new UserAuthenticatedEvent(mail));        }        return authenticated;    }    public void logout() {        //http://stackoverflow.com/a/5727444/716027        SecurityContextHolder.clearContext();    }    public void logoutIfUser(String mail) {        func.checkAndConsume(getCurrentUserName(), u -> {            if (u.equalsIgnoreCase(mail)) {                logout();            }        });    }    public boolean isAuthenticated() {        //http://stackoverflow.com/a/12372555        return  SecurityContextHolder.getContext().getAuthentication() != null &&                SecurityContextHolder.getContext().getAuthentication().isAuthenticated() &&                //when Anonymous Authentication is enabled                !(SecurityContextHolder.getContext().getAuthentication()                        instanceof AnonymousAuthenticationToken);    }    /**     * http://www.mkyong.com/spring-security/get-current-logged-in-username-in-spring-security/     * @return     */    @Nullable    public String getCurrentUserName() {        return func.checkAndApply(SecurityContextHolder.getContext().getAuthentication(), Principal::getName);    }}